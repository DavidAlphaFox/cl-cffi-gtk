;;; ----------------------------------------------------------------------------
;;; gtk.statusbar.lisp
;;;
;;; Documentation strings for the library GTK.
;;;
;;; The documentation has been copied from the GTK+ 3 Reference Manual
;;; Version 3.4.1. See http://www.gtk.org.
;;;
;;; Copyright (C) 2013 Dieter Kaiser
;;;
;;; This program is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU Lesser General Public License for Lisp
;;; as published by the Free Software Foundation, either version 3 of the
;;; License, or (at your option) any later version and with a preamble to
;;; the GNU Lesser General Public License that clarifies the terms for use
;;; with Lisp programs and is referred as the LLGPL.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU Lesser General Public License for more details.
;;;
;;; You should have received a copy of the GNU Lesser General Public
;;; License along with this program and the preamble to the Gnu Lesser
;;; General Public License.  If not, see <http://www.gnu.org/licenses/>
;;; and <http://opensource.franz.com/preamble.html>.
;;; ----------------------------------------------------------------------------

(in-package :gtk)

;;; --- gtk-statusbar ----------------------------------------------------------

(setf (documentation 'gtk-statusbar 'type)
 "@version{2013-2-3}
  @begin{short}
    A GtkStatusbar is usually placed along the bottom of an application's main
    GtkWindow. It may provide a regular commentary of the application's status
    (as is usually the case in a web browser, for example), or may be used to
    simply output a message when the status changes, (when an upload is complete
    in an FTP client, for example).
  @end{short}

  Status bars in GTK+ maintain a stack of messages. The message at the top of
  the each bar's stack is the one that will currently be displayed.

  Any messages added to a statusbar's stack must specify a context id that is
  used to uniquely identify the source of a message. This context id can be
  generated by gtk_statusbar_get_context_id(), given a message and the
  statusbar that it will be added to. Note that messages are stored in a
  stack, and when choosing which message to display, the stack structure is
  adhered to, regardless of the context identifier of a message.

  One could say that a statusbar maintains one stack of messages for display
  purposes, but allows multiple message producers to maintain sub-stacks of
  the messages they produced (via context ids).

  Status bars are created using gtk_statusbar_new().
 
  Messages are added to the bar's stack with gtk_statusbar_push().
 
  The message at the top of the stack can be removed using
  gtk_statusbar_pop(). A message can be removed from anywhere in the stack if
  its message id was recorded at the time it was added. This is done using
  gtk_statusbar_remove().
  @begin[Style Property Details]{dictionary}
    @subheading{The \"shadow-type\" style property}
      @code{\"shadow-type\"} of type @symbol{gtk-shadow-type} (Read)@br{}
      Style of bevel around the statusbar text.@br{}
      Default value: @code{:in}
  @end{dictionary}
  @begin[Signal Details]{dictionary}
    @subheading{The \"text-popped\" signal}
      Is emitted whenever a new message is popped off a statusbar's stack.
      @begin{pre}
 void user_function (GtkStatusbar *statusbar,
                     guint         context_id,
                     gchar        *text,
                     gpointer      user_data)       : Run Last
      @end{pre} 
      @begin[code]{table}
        @entry[statusbar{the object which received the signal}
        @entry[context_id]{the context id of the relevant message/statusbar}
        @entry[text]{the message that was just popped}
        @entry[user_data]{user data set when the signal handler was connected}
      @end{table}
    @subheading{The \"text-pushed\" signal}
      Is emitted whenever a new message gets pushed onto a statusbar's stack.
      @begin{pre}
 void user_function (GtkStatusbar *statusbar,
                     guint         context_id,
                     gchar        *text,
                     gpointer      user_data)       : Run Last
      @end{pre}
      @begin[code]{table}
        @entry[statusbar]{the object which received the signal}
        @entry[context_id]{the context id of the relevant message/statusbar}
        @entry[text]{the message that was pushed}
        @entry[user_data]{user data set when the signal handler was connected}
      @end{table}
  @end{dictionary}")

;;; --- gtk-statusbar-new ------------------------------------------------------

(setf (documentation 'gtk-statusbar-new 'function)
 "@version{2013-2-3}
  @return{The new @class{gtk-statusbar} widget.}
  @begin{short} 
    Creates a new GtkStatusbar ready for messages.
  @end{short}")

;;; --- gtk-status-get-context-id ----------------------------------------------

(setf (documentation 'gtk-status-get-context-id 'function)
 "@version{2013-2-3}
  @argument[statusbar]{a @class{gtk-statusbar} widget}
  @argument[context-description]{textual description of what context the new
    message is being used in}
  @return{an integer id}
  @begin{short}
    Returns a new context identifier, given a description of the actual context.
  @end{short}
  Note that the description is not shown in the UI.")

;;; --- gtk-statusbar-push -----------------------------------------------------

(setf (documentation 'gtk-statusbar-push 'function)
 "@version{2013-2-3}
  @argument[statusbar]{a @class{gtk-statusbar} widget}
  @argument[context-id]{the message's context id, as returned by
    @fun{gtk-statusbar-get-context-id}}
  @argument[text]{the message to add to the @arg{statusbar}}
  @return{a message id that can be used with @fun{gtk-statusbar-remove}}
  @begin{short}
    Pushes a new message onto a statusbar's stack.
  @end{short}
  @see-function{gtk-statusbar-get-context-id}
  @see-function{gtk-statusbar-remove}")

;;; --- gtk-statusbar-pop ------------------------------------------------------

(setf (documentation 'gtk-statusbar-pop 'function)
 "@version{2013-2-3}
  @argument[statusbar]{a @class{gtk-statusbar} widget.}
  @argument[context-id]{a context identifier}
  @begin{short}
    Removes the first message in the GtkStatusBar's stack with the given
    context id.
  @end{short}

  Note that this may not change the displayed message, if the message at the 
  top of the stack has a different context id.")

;;; --- gtk-statusbar-remove ---------------------------------------------------

(setf (documentation 'gtk-statusbar-remove 'function)
 "@version{2013-2-3}
  @argument[statusbar]{a @class{gtk-statusbar} widget.}
  @argument[context-id]{a context identifier}
  @argument[message-id]{a message identifier, as returned by
    @fun{gtk-statusbar-push}}
  @begin{short}
    Forces the removal of a message from a statusbar's stack. The exact
    @arg{context-id} and @arg{message-id} must be specified.
  @end{short}
  @see-function{gtk-statusbar-push}")

;;; --- gtk-statusbar-remove-all -----------------------------------------------

(setf (documentation 'gtk-statusbar-remove-all 'function)
 "@version{2013-2-3}
  @argument[statusbar]{a @class{gtk-statusbar} widget.}
  @argument[context-id]{a context identifier}
  @begin{short}
    Forces the removal of all messages from a statusbar's stack with the exact
    @arg{context-id}.
  @end{short}

  Since 2.22")

;;; --- gtk-statusbar-get-message-area -----------------------------------------

(setf (documentation 'gtk-statusbar-message-area 'function)
 "@version{2013-2-3}
  @argument[statusbar]{a @class{gtk-statusbar} widget.}
  @retuen{A @class{gtk-box} widget.}
  @begin{short}
    Retrieves the box containing the label widget.
  @end{short}

  Since 2.20")

;;; --- End of file atdoc-gtk.statusbar.lisp -----------------------------------
