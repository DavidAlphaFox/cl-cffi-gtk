@c -----------------------------------------------------------------------------
@c File     : gtk-display-widgets.texi
@c License  : GNU General Public License (GPL)
@c Language : English
@c Author   : Dieter Kaiser
@c Date     : 26.04.2012
@c Revision : 26.04.2012
@c 
@c Copyright (C) 2012 by Dieter Kaiser
@c -----------------------------------------------------------------------------

@menu
* Labels::
* Accelerator Labels::
* Images::
* Progress Bars::
* Statusbars::
* Infobars::
* Status Icon::
* Spinner::
@end menu

@c -----------------------------------------------------------------------------
@node Labels, Accelerator Labels, Top, Top
@section Labels

@findex GtkLabel
@findex gtk-label
@findex label, gtk-label

@findex gtk-label-new
@findex gtk-label-new-with-mnemonic
@findex gtk-label-set-text
@findex gtk-label-get-text

@findex label-new, gtk-label-new
@findex label-new-with-mnemonic, gtk-label-new-with-mnemonic
@findex label-set-text, gtk-label-set-text
@findex label-get-text, gtk-label-get-text

Labels are used a lot in GTK+, and are relatively simple.  The @code{GtkLabel}
widget displays a small amount of text.  As the name implies, most labels are
used to label another widget such as a @code{GtkButton}, a @code{GtkMenuItem},
or a @code{GtkOptionMenu}.  Labels emit no signals as they do not have an
associated X window.  If you need to catch signals, or do clipping, place it
inside a @code{GtkEventBox} widget or a Button widget.

To create a new label, use @code{make-instance} with the class name
@code{gtk-label} or the functions @code{gtk-label-new} or
@code{gtk-label-new-with-mnemonic}.  The sole argument of the functions is the
string you wish the label to display.  To change the text of the label after
creation, use the function @code{gtk-label-set-text}.  The first argument is the
label you created previously, and the second is the new string.  The space
needed for the new string will be automatically adjusted if needed.  You can
produce multi-line labels by putting line breaks in the label string.  To
retrieve the current string, use @code{gtk-label-get-text}.

@ifnotinfo
@float Figure, figure-labels
@caption{Labels}
@center @image{figures/labels507x440, 338pt}
@end float
@end ifnotinfo

@subheading Label with Mnemonics

@findex gtk-label-new-with-mnemonic
@findex gtk-label-set-text-with-mnemonic
@findex gtk-label-set-mnemonic-widget

@findex label-new-with-mnemonic, gtk-label-new-with-mnemonic
@findex label-set-text-with-mnemonic, gtk-label-set-text-with-mnemonic
@findex label-set-mnemonic-widget, gtk-label-set-mnemonic-widget

Labels may contain mnemonics.  Mnemonics are underlined characters in the
label, used for keyboard navigation.  Mnemonics are created by providing a
string with an underscore before the mnemonic character, such as "_File",
to the functions @code{gtk-label-new-with-mnemonic} or
@code{gtk-label-set-text-with-mnemonic}.
 
Mnemonics automatically activate any activatable widget the label is inside,
such as a @code{GtkButton}; if the label is not inside the mnemonic's target
widget, you have to tell the label about the target using
@code{gtk-label-set-mnemonic-widget}.

Here's a simple example where the label is inside a button:
@verbatim
  ;; Pressing Alt+H will activate this button
  (let* ((button (gtk-button-new))
         (label (gtk-label-new-with-mnemonic "_Hello")))
    (gtk-container-add button label)
    [...] )
@end verbatim

There's a convenience function to create buttons with a mnemonic label
already inside:
@verbatim 
  ;; Pressing Alt+H will activate this button
  (let ((button (gtk-button-new-with-mnemonic "_Hello")))
    [...] )
@end verbatim

To create a mnemonic for a widget alongside the label, such as a
@code{GtkEntry}, you have to point the label at the entry with
@code{gtk-label-set-mnemonic-widget}:
@verbatim
  ;; Pressing Alt+H will focus the entry
  (let* ((entry (gtk-entry-new))
         (label (gtk-label-new-with-mnemonic "_Hello")))
    (gtk-label-set-mnemonic-widget label entry)
    [...] )
@end verbatim

@subheading Markup (styled text)

@findex gtk-label-set-markup
@findex gtk-label-set-attributes

@findex label-set-markup, gtk-label-set-markup
@findex label-set-attributes, gtk-label-set-attributes

To make it easy to format text in a label (changing colors, fonts, etc.),
label text can be provided in a simple markup format.  Here's how to create
a label with a small font:

@verbatim
  (let ((label (gtk-label-new)))
    (gtk-label-set-markup label
                          "<small>Small text</small>")
    [...] )
@end verbatim

or

@verbatim
  (let ((label (make-instance 'gtk-label
                              :use-markup t
                              :label "<small>Small text</small>")))
    [...] )
@end verbatim

(See complete documentation of available tags in the Pango manual.)

@c TODO: g-markup-escape-text and g-markup-printf-escaped are not implemented.

The markup passed to @code{gtk-label-set-markup} must be valid; for example,
literal <, > and & characters must be escaped as \<, \gt;, and \&.  If you
pass text obtained from the user, file, or a network to
@code{gtk-label-set-markup}, you'll want to escape it with
@code{g-markup-escape-text} or @code{g-markup-printf-escaped}.  (Note: The
functions @code{g-markup-escape-text} and @code{g-markup-printf-escaped} are
not implemented in the Lisp binding.)
 
Markup strings are just a convenient way to set the @code{PangoAttrList} on a
label; @code{gtk-label-set-attributes} may be a simpler way to set attributes in
some cases.  Be careful though; @code{PangoAttrList} tends to cause
internationalization problems, unless you're applying attributes to the
entire string (i.e. unless you set the range of each attribute to
@code{[0, G_MAXINT)}).  The reason is that specifying the @code{start_index}
and @code{end_index} for a @code{PangoAttribute} requires knowledge of the
exact string being displayed, so translations will cause problems.

@subheading Selectable labels

@findex gtk-label-set-selectable
@findex label-set-selectable, gtk-label-set-selectable

Labels can be made selectable with @code{gtk-label-set-selectable}.  Selectable
labels allow the user to copy the label contents to the clipboard.  Only
labels that contain useful-to-copy information — such as error messages — 
should be made selectable.
 
@subheading Text layout

A label can contain any number of paragraphs, but will have performance
problems if it contains more than a small number.  Paragraphs are separated
by newlines or other paragraph separators understood by Pango.

@findex gtk-label-set-line-wrap
@findex label-set-line-wrap, gtk-label-set-line-wrap

The label widget is capable of line wrapping the text automatically.  This can
be activated using the function @code{gtk-label-set-line-wrap}.  The first
argument is the label and the second argument take @code{T} or @code{NIL} to
switch on or to switch off the line wrapping.

@findex GtkJustification
@findex gtk-justification
@findex justification, gtk-justification

@findex gtk-label-set-justify
@findex label-set-justify, gtk-label-set-justify

@code{gtk-label-set-justify} sets how the lines in a label align with one
another.  The first argument is the label and the second argument one of the
following values of the enumeration type @code{GtkJustification}.  The possible
values are shown in @ref{table-gtk-justification}.  If you want to set how the
label as a whole aligns in its available space, see
@code{gtk-misc-set-alignment}.

@float Table, table-gtk-justification
@caption{Values of the type @code{GtkJustification}}
@end float
@table @code
@item :left 
      The text is placed at the left edge of the label.
@item :right
      The text is placed at the right edge of the label.
@item :center
      The text is placed in the center of the label.
@item :fill
      The text is placed is distributed across the label.
@end table

The @code{width-chars} and @code{max-width-chars} properties can be used to
control the size allocation of ellipsized or wrapped labels.  For ellipsizing
labels, if either is specified (and less than the actual text size), it is used
as the minimum width, and the actual text size is used as the natural width of
the label.  For wrapping labels, @code{width-chars} is used as the minimum
width, if specified, and @code{max-width-chars} is used as the natural width.
Even if @code{max-width-chars} specified, wrapping labels will be rewrapped to
use all of the available width.

@findex gtk-label-set-pattern
@findex label-set-pattern, gtk-label-set-pattern

If you want your label underlined, then you can set a pattern on the label with
the function @code{gtk-label-set-pattern}.  The pattern argument indicates how
the underlining should look.  It consists of a string of underscore and space
characters.  An underscore indicates that the corresponding character in the
label should be underlined.  For example, the string "__ __" would underline the
first two characters and eight and ninth characters.

@subheading Links

@findex gtk-label-get-current-uri
@findex label-get-current-uri, gtk-label-get-current-uri

GTK+ supports markup for clickable hyperlinks in addition to regular Pango
markup.  The markup for links is borrowed from HTML, using the a with href and
title attributes.  GTK+ renders links similar to the way they appear in web
browsers, with colored, underlined text.  The title attribute is displayed as a
tooltip on the link.  An example looks like this:

@verbatim
  (gtk-label-set-markup label 
    "Go to the <a href=\"http://gtk.org/\"> GTK+ Website</a> for more ...")))
@end verbatim
 
It is possible to implement custom handling for links and their tooltips
with the @code{activate-link} signal and the @code{gtk-label-get-current-uri}
function.

@subheading GtkLabel as GtkBuildable
 
The @code{GtkLabel} implementation of the @code{GtkBuildable} interface
supports a custom @code{<attributes>} element, which supports any number of
@code{<attribute>} elements.  The @code{<attribute>} element has attributes
named @code{name}, @code{value}, @code{start} and @code{end} and allows you to
specify @code{PangoAttribute} values for this label.

@float Example, example-label-ui
@caption{A UI definition fragment specifying Pango attributes}
@end float
@verbatim
   <object class="GtkLabel">
     <attributes>
      <attribute name="weight" value="PANGO_WEIGHT_BOLD"/>
      <attribute name="background" value="red" start="5" end="10"/>"
    </attributes>
  </object>
@end verbatim

The @code{start} and @code{end} attributes specify the range of characters to
which the Pango attribute applies.  If @code{start} and @code{end} are not
specified, the attribute is applied to the whole text.  Note that specifying
ranges does not make much sense with translatable attributes.  Use markup
embedded in the translatable content instead.

@subheading Examples

@ref{figure-labels} and @ref{figure-more-labels} illustrate the functions for
@code{GtkLabel}.  The code for these examples is shown in @ref{example-labels}
and @ref{example-more-labels}.

@float Example, example-labels
@caption{Labels}
@end float
@verbatim
(defun make-heading (text)
  (make-instance 'gtk-label
                 :xalign 0
                 :use-markup t
                 :label (format nil "<b>~A</b>" text)))

(defun example-labels ()
  (within-main-loop
    (let ((window (make-instance 'gtk-window
                                 :type :toplevel
                                 :title "GTK+ 3.4 Example Labels"
                                 :default-width 250
                                 :border-width 12))
          (vbox1 (make-instance 'gtk-box
                                :orientation :vertical
                                :spacing 6))
          (vbox2 (make-instance 'gtk-box
                                :orientation :vertical
                                :spacing 6))
          (hbox (make-instance 'gtk-box
                               :orientation :horizontal
                               :spacing 12)))
      ;; Connect a handler for the signal "destroy" to window.
      (g-signal-connect window "destroy"
                        (lambda (widget)
                          (declare (ignore widget))
                          (gtk-main-quit)))
      ;; Create a Normal Label
      (gtk-box-pack-start vbox1
                          (make-heading "Normal Label:")
                          :expand nil)
      (gtk-box-pack-start vbox1
                          (make-instance 'gtk-label
                                         :label "This is a Normal Label")
                          :expand nil)
      ;; Create a Multi-line Label
      (gtk-box-pack-start vbox1
                          (make-heading "Multi-line Label:")
                          :expand nil)
      (gtk-box-pack-start vbox1
                          (make-instance 'gtk-label
                                         :label
                                         (format nil
                                               "This is a Multi-line label~%~
                                                Second line~%~
                                                Third line"))
                          :expand nil)
      ;; Create a Left Justified Label
      (gtk-box-pack-start vbox1
                          (make-heading "Left Justified Label:")
                          :expand nil)
      (gtk-box-pack-start vbox1
                          (make-instance 'gtk-label
                                         :justify :left
                                         :label
                                         (format nil
                                                 "This is a Left Justified~%~
                                                  Multi-line label~%~
                                                  Third line"))
                          :expand nil)
      ;; Create a Right Justified Label
      (gtk-box-pack-start vbox1
                          (make-heading "Right Justified Label:")
                          :expand nil)
      (gtk-box-pack-start vbox1
                          (make-instance 'gtk-label
                                         :justify :right
                                         :label
                                         (format nil
                                                "This is a Right Justified~%~
                                                 Multi-line label~%~
                                                 Third line"))
                          :expand nil)
      ;; Create a Line wrapped label
      (gtk-box-pack-start vbox2
                          (make-heading "Line Wrapped Label:")
                          :expand nil)
      (gtk-box-pack-start vbox2
                          (make-instance 'gtk-label
                                         :wrap t
                                         :label
                                         (format nil
                                          "This is an example of a ~
                                           line-wrapped label.  It should ~
                                           not be taking up the entire ~
                                           width allocated to it, but ~
                                           automatically wraps the words to ~
                                           fit.  The time has come, for all ~
                                           good men, to come to the aid of ~
                                           their party.  The sixth sheik's ~
                                           six sheep's sick.  It supports ~
                                           multiple paragraphs correctly, ~
                                           and correctly adds many extra ~
                                           spaces."))
                          :expand nil)
      ;; Create a Filled and wrapped label
      (gtk-box-pack-start vbox2
                          (make-heading "Filled and Wrapped Label:")
                          :expand nil)
      (gtk-box-pack-start vbox2
                          (make-instance 'gtk-label
                                         :wrap t
                                         :justify :fill
                                         :label
                                         (format nil
                                          "This is an example of a ~
                                           line-wrapped, filled label.  It ~
                                           should be taking up the entire ~
                                           width allocated to it.  Here is ~
                                           a sentence to prove my point.  ~
                                           Here is another sentence.  Here ~
                                           comes the sun, do de do de do.  ~
                                           This  is a new paragraph.  This ~
                                           is  another newer, longer, ~
                                           better  paragraph.  It is coming ~
                                           to an end, unfortunately."))
                          :expand nil)
      ;; Create an underlined label
      (gtk-box-pack-start vbox2
                          (make-heading "Underlined Label:")
                          :expand nil)
      (gtk-box-pack-start vbox2
                          (make-instance 'gtk-label
                                         :justify :left
                                         :use-underline t
                                         :pattern
          "_________________________ _ _________ _ ______     __ _______ ___"
                                         :label
                                         (format nil
                                          "This label is underlined!~%~
                                           This one is underlined in quite ~
                                           a  funky fashion"))
                          :expand nil)
      ;; Put the boxes into the window and show the window
      (gtk-box-pack-start hbox vbox1 :expand nil)
      (gtk-box-pack-start hbox (gtk-separator-new :vertical))
      (gtk-box-pack-start hbox vbox2 :expand nil)
      (gtk-container-add window hbox)
      (gtk-widget-show-all window))))
@end verbatim

@ifnotinfo
@float Figure, figure-more-labels
@caption{More Labels}
@center @image{figures/more-labels302x312, 201pt}
@end float
@end ifnotinfo

@float Example, example-more-labels
@caption{More Labels}
@end float
@verbatim
(defun example-more-labels ()
  (within-main-loop
    (let ((window (make-instance 'gtk-window
                                 :type :toplevel
                                 :title "GTK+ 3.4 Example More Labels"
                                 :default-width 300
                                 :border-width 6))
          (vbox1 (make-instance 'gtk-box
                                :orientation :vertical
                                :homogeneous nil
                                :spacing 6))
          (vbox2 (make-instance 'gtk-box
                                :orientation :vertical
                                :homogeneous nil
                                :spacing 6))
          (hbox (make-instance 'gtk-box
                               :orientation :horizontal
                               :homogeneous nil
                               :spacing 6)))
      (g-signal-connect window "destroy"
                        (lambda (widget)
                          (declare (ignore widget))
                          (gtk-main-quit)))
      (gtk-box-pack-start hbox
                          (make-instance 'gtk-label
                                         :label "Angle 90°"
                                         :angle 90))
      (gtk-box-pack-start vbox1
                          (make-instance 'gtk-label
                                         :label "Angel 45°"
                                         :angle 45))
      (gtk-box-pack-start vbox1
                          (make-instance 'gtk-label
                                         :label "Angel 315°"
                                         :angle 315))
      (gtk-box-pack-start hbox vbox1)
      (gtk-box-pack-start hbox
                          (make-instance 'gtk-label
                                         :label "Angel 270°"
                                         :angle 270))
      (gtk-box-pack-start vbox2 hbox)
      (gtk-box-pack-start vbox2
                          (make-instance 'gtk-hseparator))
      (gtk-box-pack-start vbox2
                          (gtk-label-new "Normal Label"))
      (gtk-box-pack-start vbox2
                          (gtk-label-new-with-mnemonic "With _Mnemonic"))
      (gtk-box-pack-start vbox2
                          (make-instance 'gtk-label
                                         :label "This Label is Selectable"
                                         :selectable t))
      (gtk-box-pack-start vbox2
                          (make-instance 'gtk-label
                                         :label
                                         "<small>Small text</small>"
                                          :use-markup t))
      (gtk-box-pack-start vbox2
                          (make-instance 'gtk-label
                                         :label
                                         "<b>Bold text</b>"
                                          :use-markup t))
      (gtk-box-pack-start vbox2
                          (make-instance 'gtk-label
                                         :use-markup t
                                         :label
                                         (format nil
                                         "Go to the ~
                                         <a href=\"http://gtk.org/\">~
                                         GTK+ Website</a> for more ...")))
      (gtk-container-add window vbox2)
      (gtk-widget-show-all window))))
@end verbatim

@c -----------------------------------------------------------------------------
@node Accelerator Labels, Images, Labels, Top
@node Images, Progress Bars, Accelerator Labels, Top

@c -----------------------------------------------------------------------------
@node Progress Bars, Statusbars, Images, Top
@section Progress Bars

@findex gtk-progress-bar-new
@findex progress-bar-new, gtk-progress-bar-new
@findex gtk-progress-bar-set-fraction
@findex progress-bar-set-fraction, gtk-progress-bar-set-fraction

@ifnotinfo
@float Figure, figure-progress-bar
@caption{Progress Bar}
@center @image{figures/progress-bar302x196, 201pt}
@end float
@end ifnotinfo

Progress bars are used to show the status of an operation.  They are pretty easy
to use, as you will see with the code below.  But first lets start out with the
function @code{gtk-progress-bar-new} to create a new progress bar.  Now that the
progress bar has been created we can use it and set the fraction with the
function @code{gtk-progress-bar-set-fraction}, which has two arguments.  The
first argument is the progress bar you wish to operate on, and the second
argument is the amount "completed", meaning the amount the progress bar has been
filled from 0-100%.  This is passed to the function as a real number ranging
from 0 to 1.

A progress bar may be set to one of a number of orientations using the function
@code{gtk-progress-bar-set-orientation}.  The second argument is the
orientation and can take one of the values 

The orientation argument may take one of the values of
@ref{table-gtk-progress-bar-orientation} to indicate the direction in which the
progress bar moves.

@float Table, table-gtk-progress-bar-orientation
@caption{@code{GtkProgressBarOrientation} is an enumeration representing
possible orientations and growth directions for the visible progress bar.}
@shortcaption{Values of the type @code{GtkProgressBarOrientation}}
@end float
@table @code
@item :left-to-right
      A horizontal progress bar growing from left to right.
@item :right-to-left
      A horizontal progress bar growing from right to left.
@item :bottom-to-top
      A vertical progress bar growing from bottom to top.
@item :top-to-bottom
      A vertical progress bar growing from top to bottom.
@end table

As well as indicating the amount of progress that has occurred, the progress bar
may be set to just indicate that there is some activity.  This can be useful in
situations where progress cannot be measured against a value range.  The
function @code{gtk-progress-bar-pulse} indicates that some progress has been
made.  The step size of the activity indicator is set using the function
@code{gtk-progress-bar-set-pulse-step}.

When not in activity mode, the progress bar can also display a configurable text
string within its trough, using the function @code{gtk-progress-bar-set-text}.

You can turn off the display of the string by calling
@code{gtk-progess-bar-set-text} again with @code{NIL} as second argument.

The current text setting of a progressbar can be retrieved with the function
@code{gtk-progress-bar-get-text}.

Progress Bars are usually used with timeouts or other such functions (see
section on Timeouts, I/O and Idle Functions) to give the illusion of
multitasking.  All will employ the @code{gtk-progress-bar-set-fraction} or
@code{gtk-progress-bar-pulse} functions in the same manner.

@ref{example-progress-bar} shows an example of the progress bar, updated using
timeouts.  This code also shows you how to reset the Progress Bar.  The output
of this example is in @ref{figure-progress-bar}.

@float Example, example-progress-bar
@caption{Progress Bar}
@end float
@verbatim
(defstruct pbar-data
  pbar
  timer
  mode)

(defun progress-bar-timeout (pdata)
  (if (pbar-data-mode pdata)
      (gtk-progress-bar-pulse (pbar-data-pbar pdata))
      (let ((val (+ (gtk-progress-bar-get-fraction (pbar-data-pbar pdata))
                    0.01)))
        (when (> val 1.0) (setq val 0.0))
        (gtk-progress-bar-set-fraction (pbar-data-pbar pdata) val)))
  t)

(defun example-progress-bar ()
  (within-main-loop
    (let ((window (make-instance 'gtk-window
                                 :type :toplevel
                                 :title "GTK+ 3.4 Example Progress Bar"
                                 :default-width 300))
          (pdata (make-pbar-data :pbar (make-instance 'gtk-progress-bar)))
          (vbox (make-instance 'gtk-box
                               :orientation :vertical
                               :border-width 12
                               :spacing 12))
          (align (gtk-alignment-new 0.1 0.9 1.0 0.0))
          (table (gtk-table-new 2 3 t)))
      (setf (pbar-data-timer pdata)
            (g-timeout-add 100
                           (lambda ()
                             (progress-bar-timeout pdata))))
      (g-signal-connect window "destroy"
                        (lambda (widget)
                          (declare (ignore widget))
                          (g-source-remove (pbar-data-timer pdata))
                          (setf (pbar-data-timer pdata) 0)
                          (gtk-main-quit)))
      (gtk-box-pack-start vbox align)
      (gtk-container-add align (pbar-data-pbar pdata))
      (gtk-box-pack-start vbox table)
      (let ((check (gtk-check-button-new-with-mnemonic "_Show text")))
        (g-signal-connect check "clicked"
           (lambda (widget)
             (declare (ignore widget))
             (let ((text (gtk-progress-bar-get-text (pbar-data-pbar pdata))))
               (if (or (null text) (zerop (length text)))
                   (gtk-progress-bar-set-text (pbar-data-pbar pdata)
                                              "Some text")
                   (gtk-progress-bar-set-text (pbar-data-pbar pdata)
                                              ""))
               (gtk-progress-bar-set-show-text
                                     (pbar-data-pbar pdata)
                                     (gtk-toggle-button-get-active check)))))
        (gtk-table-attach table check 0 1 0 1))
      (let ((check (gtk-check-button-new-with-label "Activity mode")))
        (g-signal-connect check "clicked"
           (lambda (widget)
             (declare (ignore widget))
             (setf (pbar-data-mode pdata)
                   (not (pbar-data-mode pdata)))
             (if (pbar-data-mode pdata)
                 (gtk-progress-bar-pulse (pbar-data-pbar pdata))
                 (gtk-progress-bar-set-fraction (pbar-data-pbar pdata)
                                                0.0))))
        (gtk-table-attach table check 0 1 1 2))
      (let ((check (gtk-check-button-new-with-label "Inverted")))
        (g-signal-connect check "clicked"
           (lambda (widget)
             (declare (ignore widget))
             (gtk-progress-bar-set-inverted
                                      (pbar-data-pbar pdata)
                                      (gtk-toggle-button-get-active check))))
        (gtk-table-attach table check 0 1 2 3))
      (let ((button (gtk-button-new-with-label "Close")))
        (g-signal-connect button "clicked"
                          (lambda (widget)
                            (declare (ignore widget))
                            (gtk-widget-destroy window)))
        (gtk-box-pack-start vbox button))
      (gtk-container-add window vbox)
      (gtk-widget-show-all window))))
@end verbatim

@c -----------------------------------------------------------------------------
@node Statusbars, Infobars, Progress Bars, Top
@section Statusbars

@ifnotinfo
@float Figure, figure-statusbar
@caption{Statusbar}
@center @image{figures/statusbar302x142, 201pt}
@end float
@end ifnotinfo

Statusbars are simple widgets used to display a text message.  They keep a stack
of the messages pushed onto them, so that popping the current message will
re-display the previous text message.

In order to allow different parts of an application to use the same statusbar
to display messages, the statusbar widget issues context Identifiers which are
used to identify different "users".  The message on top of the stack is the one
displayed, no matter what context it is in. Messages are stacked in
last-in-first-out order, not context identifier order.

A statusbar is created with a call to @code{gtk-statusbar-new}.  A new context
Identifier is requested using a call to the function
@code{gtk-statusbar-get-context-id} with a short textual description of the
context as the second argument.

There are three functions that can operate on statusbars:
@code{gtk-statusbar-push}, @code{gtk-statusbar-pop}, and
@code{gtk-statusbar-remove}.  The first function, @code{gtk-statusbar-push}, is
used to add a new message to the statusbar.  It returns a message identifier,
which can be passed later to the function @code{gtk-statusbar-remove} to remove
the message with the given message and context identifiers from the stack of
the statusbar.  The function @code{gtk-statusbar-pop} removes the message
highest in the stack with the given context identifier.

In addition to messages, statusbars may also display a resize grip, which can
be dragged with the mouse to resize the toplevel window containing the
statusbar, similar to dragging the window frame.  The functions
@code{gtk-statusbar-set-has-resize-grip} and
@code{gtk-statusbar-get-has-resize-grip} control the display of the resize grip.

@ref{example-statusbar} creates a statusbar and two buttons, one for pushing
items onto the statusbar, and one for popping the last item back off.

@float Example, example-statusbar
@caption{Statusbar}
@end float
@verbatim
(defun example-statusbar ()
  (within-main-loop
    (let* ((window (make-instance 'gtk-window
                                  :type :toplevel
                                  :title "Example Status Bar"
                                  :default-width 300
                                  :border-width 12))
           (vbox (make-instance 'gtk-vbox
                                :homogeneous nil
                                :spacing 3))
           (statusbar (make-instance 'gtk-statusbar))
           (id (gtk-statusbar-get-context-id statusbar "Example Status Bar"))
           (count 0))
      (g-signal-connect window "destroy"
                        (lambda (widget)
                          (declare (ignore widget))
                          (gtk-main-quit)))
      (gtk-box-pack-start vbox statusbar)
      (let ((button (gtk-button-new-with-label "Push Item")))
        (g-signal-connect button "clicked"
           (lambda (widget)
             (declare (ignore widget))
             (setq count (+ 1 count))
             (gtk-statusbar-push statusbar id (format nil "Item ~A" count))))
        (gtk-box-pack-start vbox button :expand t :fill t :padding 3))
      (let ((button (gtk-button-new-with-label "Pop Item")))
        (g-signal-connect button "clicked"
           (lambda (widget)
             (declare (ignore widget))
             (gtk-statusbar-pop statusbar id)))
        (gtk-box-pack-start vbox button :expand t :fill t :padding 3))
      (gtk-container-add window vbox)
      (gtk-widget-show window))))
@end verbatim

@c -----------------------------------------------------------------------------
@node Infobars, Status Icon, Statusbars, Top
@node Status Icon, Spinner, Infobars, Top
@node Spinner, , Status Icon, Top

