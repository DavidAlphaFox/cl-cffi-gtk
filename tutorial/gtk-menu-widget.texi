@c -----------------------------------------------------------------------------
@c File     : gtk-menu-widget.texi
@c License  : GNU General Public License (GPL)
@c Language : English
@c Author   : Dieter Kaiser
@c Date     : 05.04.2012
@c Revision : 25.01.2014
@c .
@c Copyright (C) 2012, 2013, 2014 by Dieter Kaiser
@c -----------------------------------------------------------------------------

@menu
* Menus::
* Toolbars::
* GtkUIManager::
@end menu

This chapter is derived from Stewart Weiss's tutorial
@url{http://www.compsci.hunter.cuny.edu/~sweiss/course_materials/csci493.70/lecture_notes/GTK_menus.pdf, Menus and Toolbars in GTK}.  The original code snippets have been translated to Lisp.

GUI applications have menus and toolbars.  They are an important part of how the
user interacts with the application.  Although menus and toolbars look like
different things, they are both containers for widgets that, when clicked,
result in the performance of actions.  Menus contain menu items, and toolbars
usually contain buttons.  Although toolbars are actually more general than this
in that they can contain arbitrary widgets, they are usually used to provide
quick access to frequently used menu items.

@c -----------------------------------------------------------------------------
@node Menus, Toolbars, Top, Top
@section Menus

GTK+ knows several classes related to the creation of menus:
@table @code
  @item @xurl{gtk-menu-shell}
        A @xurl{gtk-menu-shell} is the abstract base class used to derive the
        @xurl{gtk-menu} and @xurl{gtk-menu-bar} subclasses.
        A @xurl{gtk-menu-shell} is a container of @xurl{gtk-menu-item} objects
        arranged in a list which can be navigated, selected, and activated by
        the user to perform application functions.  A @xurl{gtk-menu-item} can
        have a submenu associated with it, allowing for nested hierarchical
        menus.
  @item @xurl{gtk-menu-bar}
        The @xurl{gtk-menu-bar} is a subclass of @xurl{gtk-menu-shell} which
        contains one or more menu items.  The result is a standard menu bar
        which can hold many menu items.
  @item @xurl{gtk-menu}
        A @xurl{gtk-menu} is a @xurl{gtk-menu-shell} that implements a drop down
        menu consisting of a list of @xurl{gtk-menu-item} objects which can be
        navigated and activated by the user to perform application functions.
        A @xurl{gtk-menu} is most commonly dropped down by activating a
        @xurl{gtk-menu-item} in a @xurl{gtk-menu-bar} or popped up by activating
        a @xurl{gtk-menu-item} in another @xurl{gtk-menu}.
        Applications can display a @xurl{gtk-menu} as a popup menu by calling
        the function @xurl{gtk-menu-popup}.
  @item @xurl{gtk-menu-item}
        The @xurl{gtk-menu-item} widget and the derived widgets are the only
        valid childs for menus.  Their function is to correctly handle
        highlighting, alignment, events and submenus.
        As it derives from @xurl{gtk-bin} it can hold any valid child widget,
        although only a few are really useful.
  @item @xurl{gtk-check-menu-item}
        A @xurl{gtk-check-menu-item} is a menu item that maintains the state of
        a boolean value in addition to a @xurl{gtk-menu-item} usual role in
        activating application code.
        A check box indicating the state of the boolean value is displayed at
        the left side of the @xurl{gtk-menu-item}.  Activating the
        @xurl{gtk-menu-item} toggles the value.
  @item @xurl{gtk-image-menu-item}
        A @xurl{gtk-image-menu-item} is a menu item which has an icon next to
        the text label.
        Note that the user can disable display of menu icons, so make sure to
        still fill in the text label.
  @item @xurl{gtk-separator-menu-item}
        The @xurl{gtk-separator-menu-item} is a separator used to group items
        within a menu.  It displays a horizontal line with a shadow to make it
        appear sunken into the interface.
@end table

@c -----------------------------------------------------------------------------
@node Principles of Menus, Creating Menus by Hand, Top, Top
@subsection Principles of Menus

You will find menu creation and menu handling confusing unless you remember the
following principles:
@itemize @bullet
  @item Menus of the @xurl{gtk-menu} class and menubars of the
        @xurl{gtk-menu-bar} class are containers.  They are dervid from the
        same abstact base class @xurl{gtk-menu-shell}.
  @item The only thing you can put into a menu or a menubar is a menu item.
  @item Menus can be attached to menu items so that when the item is activated,
        the menu drops down or pops up.  If a menu item is a child of a menubar,
        the the menu attached to it drops down.  If it is a child of a menu, the
        the menu attached to it pops up.
  @item Menu items are the only things that you can activate, and these emit an
        activate signal, which must be connected to a callback to handle the
        user's clicks on that item.  Although they emit other signals, this is
        the one you will normally use.
@end itemize

If you remember these principles going forwad, things will be easy to
understand.  In essence, menus form a recursively defined hierarchy.  The root
of this hierarchy is always a menubar.  We usually think of menubars as
horizontal, rectangular regions at the top of a window, but they can be vertical
as well, and can be placed anywhere you choose.  Those labels that you see in
the menubar, such as "File", "Edit" or "Help", are menu items.  Menu items can
have menus attached to them, so that when they get clicked, the menu appears.
Each of the menus attached to a menu item may have menu items that have menus
attached to them, and these may have items that have menus attached to them,
and so on.

We use the term submenu to refer to a menu that is attached to a menu item
within another menu, but there is no special class of submenus; a submenu is
just a menu.  Because a menu item always exists as a child of either a menu or
a menubar, the menu that is attached to a menu item is always a submenu of
something else.  This should make it easy to remember the fact that there is but
a single way to attach a menu to a menu item with the function
@xurl{gtk-menu-item-set-submenu} which we will discuss below.  The point is that
the attached menu is of necessity a submenu of something else.

@c -----------------------------------------------------------------------------
@node Creating Menus by Hand, Pop-Up Menus for Widgets, Principles of Menus, Top
@subsection Creating Menus by Hand

@ifnotinfo
@float Figure, figure-menus-by-hand
@caption{Creating Menus by Hand}
@center @image{figures/menus-by-hand, 285pt}
@end float
@end ifnotinfo

This method is called "by hand" because the menu is constructed in the same way
that a typical house is constructed, by assembling the pieces and attaching them
to each other, one by one.

The outline of the steps that must be taken is:
@enumerate
  @item Create the menubar.
  @item Create the menu items that will be packed into the menubar.
  @item Pack the menu items into the menubar.
  @item Create the menus that the menu items will activate.
  @item Attach these submenus to the menu items.
  @item For each submenu (a) create the menu items that it will contain, and
        (b) pack these menu items into the submenu.
@end enumerate

These steps are listed in a top-down sequence, but it is conceivable to carry
them out in many different permutations.  The above sequence has a natural logic
to it and it the order in which they are described in detail below.

You create the menubar with the function @xurl{gtk-menu-bar-new}.  This creates
an empty menubar.  Menubars themselves have almost no methods methods.  When
menus and menubars were unified by creating a menushell class and deriving them
from this parent class, their specific methods were deprecated.  The menubar
itself should be added to its parent container with an appropriate packing
function.  Typically you will put it at the top of the content area just below
the top-level windows's title bar, and there will be other "stuff" underneath
it, so the usual sequence is
@example
(let ((vbox (gtk-box-new :vertical 0)))
  (let ((menu-bar (gtk-menu-bar-new)))
    (gtk-container-add vbox menu-bar))
  (gtk-container-add window vbox)
  ... )
@end example
For each menu that you want to put into the menubar, you will need a separate
menu item.  Regular menu items can be created with the functions
@xurl{gtk-menu-item-new}, @xurl{gtk-menu-item-new-with-label}, or
@xurl{gtk-menu-item-new-with-mnemonic}.

The first of these creates a menu item with no label; you would use later
the function @xurl{gtk-menu-item-set-label} to create a label for it.  The
second and third functions create menu items with either a plain label or with
a label and a mnemonic, just like is done with buttons.  Later you will see that
there are four subclasses of menu items, among which are image menu items, which
can contain an image instead of or in addition to a label.

There are three different ways to pack menu items into menubars and menus; they
are all methods of the @xurl{gtk-menu-shell} base class:
@xurl{gtk-menu-shell-append}, @xurl{gtk-menu-shell-prepend}, and
@xurl{gtk-menu-shell-insert}.

The second argument in all three is the menu item to be put into the container.
The differences are probably obvious.  The append method adds the menu item to
the end of the list of those already in the menu shell, whereas the prepend
method inserts it before all of the items already in it.  The insert method
takes an integer position as the third argument, which is the position in the
item list where child is added. Positions are numbered from 0 to (n-1).  If an
item is put into position k, then all items currently in the list at positions
k through (n-1) are shifted downward in the list to make room for the new item.

The following code fragment creates a few labeled menu items, and packs them
into the menubar in left-to-right order:
@example
(let ((file-item (gtk-menu-item-new-with-label "File"))
      (view-item (gtk-menu-item-new-with-label "View"))
      (tools-item (gtk-menu-item-new-with-label "Tools"))
      (help-item (gtk-menu-item-new-with-label "Help")))
  (gtk-menu-shell-append menu-bar file-item)
  (gtk-menu-shell-append menu-bar view-item)
  (gtk-menu-shell-append menu-bar tools-item)
  (gtk-menu-shell-append menu-bar help-item)
  ... )
@end example
The next step is to create the menus that will be dropped down when these menu
items are activated.  Menus are created with the function @xurl{gtk-menu-new}.

For the above menu items, we would create for menus:
@example
(let ((file-menu (gtk-menu-new))
      (view-menu (gtk-menu-new))
      (tools-menu (gtk-menu-new))
      (help-menu (gtk-menu-new)))
  (gtk-menu-item-set-submenu file-item file-menu)
  (gtk-menu-item-set-submenu view-item view-menu)
  (gtk-menu-item-set-submenu tools-item tools-menu)
  (gtk-menu-item-set-submenu help-item help-menu)
  ... )
@end example
Having created the menus, we have to attach them to the menu items using the
function @xurl{gtk-menu-item-set-submenu}.  This takes the menu item, and the
menu to be attached.  We attach the for menus as follows:
@example
 (gtk-menu-item-set-submenu file-item file-menu)
 (gtk-menu-item-set-submenu view-item view-menu)
 (gtk-menu-item-set-submenu tool-item tools-menu)
 (gtk-menu-item-set-submenu help-item help-menu)
@end example
The next step is to create the menu items to populate each of the menus, and add
them to these menus.  There are no new functions to learn for these steps.  It
is simply a matter of creating menu items and packing them.  In the example we
are using, our File menu will have an Open item, a Close item, and an Exit item.
We will also use a separator between the Close item and the Exit item.
Separators are members of the @xurl{gtk-separator-menu-item} class and are
created with @xurl{gtk-separator-menu-item-new}.

The File menus's items will be simple labeled items.  The code to create them
and pack them is:
@example
 (let ((open-item (gtk-menu-item-new-with-label "Open"))
       (close-item (gtk-menu-item-new-with-label "Close"))
       (exit-item (gtk-menu-item-new-with-label "Exit")))
   (gtk-menu-shell-append file-menu open-item)
   (gtk-menu-shell-append file-menu close-item)
   (gtk-menu-shell-append file-menu (gtk-separator-menu-item-new))
   (gtk-menu-shell-append file-menu exit-item)
   ... )
@end example
To create a menu that contains submenus does not involve anything other than
descending a level in the menu hierarchy and repeating these steps.  To
illustrate, we will design the Help menu so that it has two items, one of which
is a menu item that, when activated, pops up a submenu.  The first two steps are
to create the two menu items and pack the into the Help menu:
@example
(let ((query-item (gtk-menu-item-new-with-label "What's this?"))
      (about-help-item (gtk-menu-item-new-with-label "About this program")))
  (gtk-menu-shell-append help-menu query-item)
  (gtk-menu-shell-append help-menu (gtk-separator-menu-item-new))
  (gtk-menu-shell-append help-menu about-help-item)
  ... )
@end example
The next step is to create a submenu and attach it to the
@code{about-help-item}:
@example
(let ((about-help-menu (gtk-menu-new)))
  (gtk-menu-item-set-submenu about-help-item about-help-menu)
  ... )
@end example
The last step is to create a submenu and attach it to the
@code{about-help-menu}:
@example
(let ((about-tool-item (gtk-menu-item-new-with-label "About Tools"))
      (about-stuff-item (gtk-menu-item-new-with-label "About Other Stuff")))
  (gtk-menu-shell-append about-help-menu about-tool-item)
  (gtk-menu-shell-append about-help-menu about-stuff-item)
  ... )
@end example
The preceding steps create the menu items, but they are not yet connected to the
"activate" signal.  Menu items that have a submenu do not need to be connected
to the "activate" signal; GTK+ arranges for that signal to open the submenu.
But the others need to be connected.  For example, we would connect the Exit
menu item to a callback to quit the application with
@example
(g-signal-connect exit-item "activate"
                  (lambda (widget)
                    (declare (ignore widget))
                    (gtk-widget-destroy window))))
@end example

The following Lisp code shows a complete example for creating menus by hand.
It includes all code snippets shown above. The output is shown in
@ref{figure-menus-by-hand}.

@float Example, example-menus-by-hand
@caption{Creating Menus by Hand}
@end float
@verbatim
(defun example-menus-by-hand ()
  (within-main-loop
    ;; We set the "gtk-shell-shows-menubar" property to NIL to display the
    ;; menubar by the application itself and not by the desktop environment.
    (setf (gtk-settings-gtk-shell-shows-menubar (gtk-settings-get-default))
          nil)
    (let ((window (make-instance 'gtk-window
                                 :type :toplevel
                                 :default-width 425
                                 :default-height 250
                                 :title "Example Menus by Hand"))
          ;; A vbox to put a menu and a button in
          (vbox (gtk-box-new :vertical 0)))
      ;; Create a menu bar and the menu items for the menu bar
      (let ((menu-bar (gtk-menu-bar-new))
            (file-item (gtk-menu-item-new-with-label "File"))
            (view-item (gtk-menu-item-new-with-label "View"))
            (tools-item (gtk-menu-item-new-with-label "Tools"))
            (help-item (gtk-menu-item-new-with-label "Help")))
        ;; Add the menu bar to the main container
        (gtk-container-add vbox menu-bar)
        ;; Add the menu items to the menu bar
        (gtk-menu-shell-append menu-bar file-item)
        (gtk-menu-shell-append menu-bar view-item)
        (gtk-menu-shell-append menu-bar tools-item)
        (gtk-menu-shell-append menu-bar help-item)
        ;; Create the menus for the menu items in the menu bar
        (let ((file-menu (gtk-menu-new))
              (view-menu (gtk-menu-new))
              (tools-menu (gtk-menu-new))
              (help-menu (gtk-menu-new)))
          ;; Attach the submenus to the items of the menu bar
          (gtk-menu-item-set-submenu file-item file-menu)
          (gtk-menu-item-set-submenu view-item view-menu)
          (gtk-menu-item-set-submenu tools-item tools-menu)
          (gtk-menu-item-set-submenu help-item help-menu)
          ;; Create items to put into the File menu
          (let ((open-item (gtk-menu-item-new-with-label "Open"))
                (close-item (gtk-menu-item-new-with-label "Close"))
                (exit-item (gtk-menu-item-new-with-label "Exit")))
            ;; Append the items to the File menu
            (gtk-menu-shell-append file-menu open-item)
            (gtk-menu-shell-append file-menu close-item)
            (gtk-menu-shell-append file-menu (gtk-separator-menu-item-new))
            (gtk-menu-shell-append file-menu exit-item)
            ;; Add a signal handler for exit-item
            (g-signal-connect exit-item "activate"
                              (lambda (widget)
                                (declare (ignore widget))
                                (gtk-widget-destroy window))))

          ;; The view and tools menus will be empty for now

          ;; Create items to put into the Help menu
          (let ((query-item (gtk-menu-item-new-with-label "What's this?"))
                (about-help-item (gtk-menu-item-new-with-label "Info")))
            ;; Append the items to the About Help Menu
            (gtk-menu-shell-append help-menu query-item)
            (gtk-menu-shell-append help-menu (gtk-separator-menu-item-new))
            (gtk-menu-shell-append help-menu about-help-item)
            ;; Create a submenu and items for about-help-item
            (let ((about-help-menu (gtk-menu-new))
                  (about-tool-item (gtk-menu-item-new-with-label "About This"))
                  (about-more-item (gtk-menu-item-new-with-label "About That")))
              ;; Attach the submenu to the about-help-item
              (gtk-menu-item-set-submenu about-help-item about-help-menu)
              ;; Append the items to the about-help-menu
              (gtk-menu-shell-append about-help-menu about-tool-item)
              (gtk-menu-shell-append about-help-menu about-more-item)))))
      (g-signal-connect window "destroy"
                        (lambda (widget)
                          (declare (ignore widget))
                          (leave-gtk-main)))
      (gtk-container-add window vbox)
      (gtk-widget-show-all window))))
@end verbatim

@c -----------------------------------------------------------------------------
@node Pop-Up Menus for Widgets, , Creating Menus by Hand, Top
@subsection Pop-Up Menus for Widgets



@c -----------------------------------------------------------------------------
@node Toolbars, GtkUIManager, Menus, Top
@section Toolbars

@c -----------------------------------------------------------------------------
@node GtkUIManager, , Toolbars, Top
@section GtkUIManager


