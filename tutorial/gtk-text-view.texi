@c -----------------------------------------------------------------------------
@c File     : gtk-text-view.texi
@c License  : GNU General Public License (GPL)
@c Language : English
@c Author   : Dieter Kaiser
@c Date     : 22.05.2012
@c Revision : 01.07.2012
@c
@c Copyright (C) 2012 by Dieter Kaiser
@c -----------------------------------------------------------------------------

@menu
* Text Widget Overview::
* Simple Example::
* Example of Changing Text Attributes::
@end menu

@c -----------------------------------------------------------------------------
@node Text Widget Overview, Simple Example, Top, Top
@section Text Widget Overview

GTK+ has an extremely powerful framework for multiline text editing.  The
primary objects involved in the process are @code{GtkTextBuffer}, which
represents the text being edited, and @code{GtkTextView}, a widget which can
display a @code{GtkTextBuffer}.  Each buffer can be displayed by any number of
views.

One of the important things to remember about text in GTK+ is that it's in the
UTF-8 encoding.  This means that one character can be encoded as multiple bytes.
Character counts are usually referred to as offsets, while byte counts are
called indexes.  If you confuse these two, things will work fine with ASCII, but
as soon as your buffer contains multibyte characters, bad things will happen.

Text in a buffer can be marked with tags.  A tag is an attribute that can be
applied to some range of text.  For example, a tag might be called "bold" and
make the text inside the tag bold.  However, the tag concept is more general
than that; tags don't have to affect appearance.  They can instead affect the
behavior of mouse and key presses, "lock" a range of text so the user can't edit
it, or countless other things.  A tag is represented by a @code{GtkTextTag}
object.  One @code{GtkTextTag} can be applied to any number of text ranges in
any number of buffers.

Each tag is stored in a @code{GtkTextTagTable}.  A tag table defines a set of
tags that can be used together.  Each buffer has one tag table associated with
it; only tags from that tag table can be used with the buffer.  A single tag
table can be shared between multiple buffers, however.

Tags can have names, which is convenient sometimes (for example, you can name
your tag that makes things bold "bold"), but they can also be anonymous (which
is convenient if you're creating tags on-the-fly).

Most text manipulation is accomplished with iterators, represented by a
@code{GtkTextIter}.  An iterator represents a position between two characters in
the text buffer.  @code{GtkTextIter} is a struct designed to be allocated on the
stack; it's guaranteed to be copiable by value and never contain any
heap-allocated data.  Iterators are not valid indefinitely; whenever the buffer
is modified in a way that affects the number of characters in the buffer, all
outstanding iterators become invalid.  (Note that deleting 5 characters and then
reinserting 5 still invalidates iterators, though you end up with the same
number of characters you pass through a state with a different number).

Because of this, iterators can't be used to preserve positions across buffer
modifications.  To preserve a position, the @code{GtkTextMark} object is ideal.
You can think of a mark as an invisible cursor or insertion point; it floats in
the buffer, saving a position.  If the text surrounding the mark is deleted, the
mark remains in the position the text once occupied; if text is inserted at the
mark, the mark ends up either to the left or to the right of the new text,
depending on its gravity.  The standard text cursor in left-to-right languages
is a mark with right gravity, because it stays to the right of inserted text.

Like tags, marks can be either named or anonymous.  There are two marks built-in
to @code{GtkTextBuffer}; these are named "insert" and "selection_bound" and
refer to the insertion point and the boundary of the selection which is not the
insertion point, respectively.  If no text is selected, these two marks will be
in the same position.  You can manipulate what is selected and where the cursor
appears by moving these marks around.  If you want to place the cursor in
response to a user action, be sure to use @code{gtk-text-buffer-place-cursor},
which moves both at once without causing a temporary selection (moving one then
the other temporarily selects the range in between the old and new positions).

Text buffers always contain at least one line, but may be empty (that is,
buffers can contain zero characters).  The last line in the text buffer never
ends in a line separator (such as newline); the other lines in the buffer always
end in a line separator.  Line separators count as characters when computing
character counts and character offsets.  Note that some Unicode line separators
are represented with multiple bytes in UTF-8, and the two-character sequence
"\r\n" is also considered a line separator.

@c -----------------------------------------------------------------------------
@node Simple Example, Example of Changing Text Attributes, Text Widget Overview, Top
@section Simple Example

@ifnotinfo
@float Figure, figure-simple-text-view
@caption{Most Simple Text View}
@center @image{figures/simple-text-view302x229, 201pt}
@end float
@end ifnotinfo

The simplest usage of @code{GtkTextView} might look like in
@ref{example-simple-text-view}.  The output is shown in
@ref{figure-simple-text-view}.

@float Example, example-simple-text-view
@caption{Most Simple Text View}
@end float
@verbatim
(defun example-simple-text-view ()
  (within-main-loop
    (let* ((window (make-instance 'gtk-window
                                  :type :toplevel
                                  :title "Example Simple Text View"
                                  :default-width 300))
           (view (make-instance 'gtk-text-view))
           (buffer (gtk-text-view-get-buffer view)))
      (g-signal-connect window "destroy"
                        (lambda (widget)
                          (declare (ignore widget))
                          (leave-gtk-main)))
      (gtk-text-buffer-set-text buffer "Hello, this is some text.")
      (gtk-container-add window view)
      (gtk-widget-show-all window))))
@end verbatim

In many cases it's also convenient to first create the buffer with
@code{gtk-text-buffer-new}, then create a widget for that buffer with
@code{gtk-text-view-new-with-buffer}.  Or you can change the buffer the widget
displays after the widget is created with @code{gtk-text-view-set-buffer}.

@c -----------------------------------------------------------------------------
@node Example of Changing Text Attributes, , Simple Example, Top
@section Example of Changing Text Attributes

@ifnotinfo
@float Figure, figure-text-view-attributes
@caption{Changing Text Attributes of a Text View}
@center @image{figures/text-view-attributes352x229, 235pt}
@end float
@end ifnotinfo

There are two ways to affect text attributes in @code{GtkTextView}.  You can
change the default attributes for a given @code{GtkTextView}, and you can apply
tags that change the attributes for a region of text.  For text features that
come from the theme — such as font and foreground color — use standard
@code{GtkWidget} functions such as @code{gtk-widget-modify-font} or
@code{gtk-widget-override-text}.  For other attributes there are dedicated
methods on @code{GtkTextView} such as @code{gtk-text-view-set-tabs}.

@float Example, example-text-view-attributes
@caption{Changing Text Attributes of a Text View}
@end float
@verbatim
(defun example-text-view-attributes ()
  (within-main-loop
    (let* ((window (make-instance 'gtk-window
                                  :type :toplevel
                                  :title "Example Text View Attributes"
                                  :default-width 350))
           (view (make-instance 'gtk-text-view))
           (buffer (gtk-text-view-get-buffer view)))
      (g-signal-connect window "destroy"
                        (lambda (widget)
                          (declare (ignore widget))
                          (leave-gtk-main)))
      (gtk-text-buffer-set-text buffer "Hello, this is some text.")
      ;; Change default font throughout the widget
      (gtk-widget-override-font
                             view
                             (pango-font-description-from-string "Serif 20"))
      ;; Change default color throughout the widget
      (gtk-widget-override-color view
                                 :normal
                                 (gdk-rgba-parse "red"))
      ;; Change left margin throughout the widget
      (gtk-text-view-set-left-margin view 30)
      ;; Use a tag to change the color for just one part of the widget
      (let ((tag (make-instance 'gtk-text-tag
                                :name "blue_foreground"
                                :foreground "blue"))
            (start (gtk-text-buffer-get-iter-at-offset buffer 7))
            (end (gtk-text-buffer-get-iter-at-offset buffer 12)))
        ;; Add the tag to the tag table of the buffer
        (gtk-text-tag-table-add (gtk-text-buffer-get-tag-table buffer) tag)
        ;; Apply the tag to a region of the text in the buffer
        (gtk-text-buffer-apply-tag buffer tag start end))
      ;; Add the view to the window and show all
      (gtk-container-add window view)
      (gtk-widget-show-all window))))
@end verbatim



